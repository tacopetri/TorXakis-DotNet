{-
TorXakis :: Model-Based Testing
Test model for the OS Movement Refactor (branches/feature-movement-refactor)
-}

-- Internal message types:
-- used to synchronize between main model and sub-models.
{-
TYPE2DEF  Internal ::=
END2DEF
-}

-- External message types:
-- these are the messages that the SUT understands via its test adapter.
TYPEDEF  External ::=
 MoveCreate { moveCreateId :: Int }
 | MoveStart { moveStartId :: Int }
 | MovePause { movePauseId :: Int }
 | MoveResume { moveResumeId :: Int }
 | MoveAbort { moveAbortId :: Int }
 | MoveComplete { moveCompleteId :: Int }
ENDDEF

-- There are only 2 SUT channels. All input messages are sent over the
-- input channel, all output messages are sent over the output channel.
-- For now, we don't restrict the input/output direction of the messages:
-- both channels may send/receive ANY of the message types.
-- There are special SYNC channels for sychronization between the processes:
-- one for each level of nested sychronization.
CHANDEF Channels ::=
 Input :: External;
 Output :: External
ENDDEF

STAUTDEF Move [Input, Output :: External] (i :: Int)
 ::=
  STATE None, Created, Started, Paused, Stopped
  
  VAR id :: Int
  
  INIT None { id := i }
  
  TRANS
    None -> Input ? create [[ IF isMoveCreate(create) THEN moveCreateId(create) == id ELSE False FI ]] -> Created
    Created -> Output ? start [[ IF isMoveStart(start) THEN moveStartId(start) == id ELSE False FI ]] -> Started
    Started -> Input ? pause [[ IF isMovePause(pause) THEN movePauseId(pause) == id ELSE False FI ]] -> Paused
    Paused -> Input ? resume [[ IF isMoveResume(resume) THEN moveResumeId(resume) == id ELSE False FI ]] -> Started
    Started -> Input ? abort [[ IF isMoveAbort(abort) THEN moveAbortId(abort) == id ELSE False FI ]] -> Stopped
    Paused -> Input ? abort [[ IF isMoveAbort(abort) THEN moveAbortId(abort) == id ELSE False FI ]] -> Stopped
    Started -> Output ? complete [[ IF isMoveComplete(complete) THEN moveCompleteId(complete) == id ELSE False FI ]] -> Stopped
    Paused -> Output ? complete [[ IF isMoveComplete(complete) THEN moveCompleteId(complete) == id ELSE False FI ]] -> Stopped
    
ENDDEF

-- The test model consists of the composition of parametrized processes,
-- synchronized via communication over the internal SYNC channels.
MODELDEF Model ::=
 CHAN IN Input
 CHAN OUT Output

 BEHAVIOUR
   --Input ? create :: External [[ IF isMoveCreateMoveToAction(create) THEN moveCreateMoveToActionId(create) == 1 ELSE False FI ]]
   Move [Input, Output] (0)
   ||| Move [Input, Output] (1)
   ||| Move [Input, Output] (2)
   ||| Move [Input, Output] (3)
   ||| Move [Input, Output] (4)
   ||| Move [Input, Output] (5)
   ||| Move [Input, Output] (6)
   ||| Move [Input, Output] (7)
   ||| Move [Input, Output] (8)
   ||| Move [Input, Output] (9)
   
   ||| Move [Input, Output] (10)
   ||| Move [Input, Output] (11)
   ||| Move [Input, Output] (12)
   ||| Move [Input, Output] (13)
   ||| Move [Input, Output] (14)
   ||| Move [Input, Output] (15)
   ||| Move [Input, Output] (16)
   ||| Move [Input, Output] (17)
   ||| Move [Input, Output] (18)
   ||| Move [Input, Output] (19)
ENDDEF

-- We connect to the system via a single TCP socket: input+output combined.
-- This preserves message order within the stream, as opposed to using
-- multiple TCP sockets: one for each channel.
-- We explicitly use a single INPUT and single OUTPUT channel to enforce
-- message order, using abstract data types to distinguish message types.
CNECTDEF System ::=
 CLIENTSOCK
  CHAN OUT Input HOST "localhost" PORT 9001
  ENCODE Input ? s -> ! toString(s)

  CHAN IN Output HOST "localhost" PORT 9001
  DECODE Output ! fromString(s) <- ? s
ENDDEF
