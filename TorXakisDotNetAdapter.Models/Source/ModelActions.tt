<#@ template debug="false" hostspecific="true" language="C#" #>
<#@ output extension=".cs" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Text.RegularExpressions" #>
<#@ assembly name="$(TargetDir)\TorXakisDotNetAdapter.dll"#>
<#@ import namespace="TorXakisDotNetAdapter" #>
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Text.RegularExpressions;
using TorXakisDotNetAdapter.Refinement;

namespace TorXakisDotNetAdapter.Models
{
<#
    // Parse all model files inside the model directory.
    string projectName = Host.ResolveParameterValue("-", "-", "projects").Split('|')[1];
    DirectoryInfo modelDirectory= new DirectoryInfo(Path.Combine(Environment.CurrentDirectory, projectName, "Models"));
    TorXakisModelCollection modelCollection = new TorXakisModelCollection(modelDirectory);
    Dictionary<string, Dictionary<string, string>> actions = modelCollection.ParseActions();

    // Generate classes for all action types.
    foreach (KeyValuePair<string, Dictionary<string, string>> kvp1 in actions)
    {
        string className = kvp1.Key;
#>
    /// <summary>Generated from TorXakis model.</summary>
	public sealed class <#= className #> : ModelAction
	{
<#
        foreach (KeyValuePair<string, string> kvp2 in kvp1.Value)
        {
            // TorXakis requires fields starting with a lower case character.
            // The .NET convention however, is camel case for properties.
            char[] propertyNameChars= kvp2.Key.ToArray();
            propertyNameChars[0] = Char.ToUpper(propertyNameChars[0]);
            string propertyName = new string(propertyNameChars);

            // In addition, TorXakis requires UNIQUE field names across ALL types.
            // This leads to very long names that we would like to avoid.
            if (propertyName.StartsWith(className))
                propertyName = propertyName.Substring(className.Length);

            // Convert TorXakis data type to .NET type.
            string propertyType = TorXakisModel.TypeMapping[kvp2.Value];
#>
        /// <summary>Generated from TorXakis model.</summary>
        public <#= propertyType #> <#= propertyName #> { get; set; }
<#
        }
#>
	}

<#
    }
#>
}
